{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elifn\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\REACT_TUTORIAL\\\\se-project\\\\src\\\\components\\\\Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination(_ref) {\n  _s();\n\n  let {\n    data,\n    RenderComponent,\n    pageLimit,\n    dataLimit\n  } = _ref;\n  const [pages] = useState(Math.round(data.length / dataLimit));\n  const [currentPage, setCurrentPage] = useState(1);\n\n  function goToNextPage() {\n    setCurrentPage(page => page + 1);\n  }\n\n  function goToPreviousPage() {\n    setCurrentPage(page => page - 1);\n  }\n\n  function changePage(event) {\n    const pageNumber = Number(event.target.textContent);\n    setCurrentPage(pageNumber);\n  }\n\n  const getPaginatedData = () => {\n    const startIndex = currentPage * dataLimit - dataLimit;\n    const endIndex = startIndex + dataLimit;\n    return data.slice(startIndex, endIndex);\n  };\n\n  const getPaginationGroup = () => {\n    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n    return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      style: {\n        borderRadius: \"15px\",\n        flex: \"1 1 21rem\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        flexDirection: \"column\",\n        alignSelf: \"normal\",\n        maxWidth: \"250px\"\n      },\n      children: getPaginatedData().map((d, idx) => /*#__PURE__*/_jsxDEV(RenderComponent, {\n        book: d\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousPage,\n        className: `prev ${currentPage === 1 ? \"disabled\" : \"\"}`,\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), getPaginationGroup().map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changePage,\n        className: `paginationItem ${currentPage === item ? \"active\" : null}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextPage,\n        className: `next ${currentPage === pages ? \"disabled\" : \"\"}`,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pagination, \"TAuAHIRT/chsJ5y/NrRj9/numrE=\");\n\n_c = Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["C:/Users/elifn/OneDrive/Masaüstü/REACT_TUTORIAL/se-project/src/components/Pagination.js"],"names":["React","useState","Pagination","data","RenderComponent","pageLimit","dataLimit","pages","Math","round","length","currentPage","setCurrentPage","goToNextPage","page","goToPreviousPage","changePage","event","pageNumber","Number","target","textContent","getPaginatedData","startIndex","endIndex","slice","getPaginationGroup","start","floor","Array","fill","map","_","idx","borderRadius","flex","display","flexWrap","flexDirection","alignSelf","maxWidth","d","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Pagination({\r\n  data,\r\n  RenderComponent,\r\n  pageLimit,\r\n  dataLimit,\r\n}) {\r\n  const [pages] = useState(Math.round(data.length / dataLimit));\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  function goToNextPage() {\r\n    setCurrentPage((page) => page + 1);\r\n  }\r\n\r\n  function goToPreviousPage() {\r\n    setCurrentPage((page) => page - 1);\r\n  }\r\n\r\n  function changePage(event) {\r\n    const pageNumber = Number(event.target.textContent);\r\n    setCurrentPage(pageNumber);\r\n  }\r\n\r\n  const getPaginatedData = () => {\r\n    const startIndex = currentPage * dataLimit - dataLimit;\r\n    const endIndex = startIndex + dataLimit;\r\n    return data.slice(startIndex, endIndex);\r\n  };\r\n\r\n  const getPaginationGroup = () => {\r\n    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\r\n    return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\r\n  };\r\n  return (\r\n    <div>\r\n      {/* show the posts, 10 posts at a time */}\r\n      <div className=\"dataContainer\" style={{borderRadius: \"15px\",\r\n          flex: \"1 1 21rem\",\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          flexDirection: \"column\",\r\n          alignSelf: \"normal\",\r\n          maxWidth: \"250px\",}}>\r\n        {getPaginatedData().map((d, idx) => (\r\n          <RenderComponent key={idx} book={d} />\r\n        ))}\r\n      </div>\r\n\r\n      {/* show the pagiantion\r\n        it consists of next and previous buttons\r\n        along with page numbers, in our case, 5 page\r\n        numbers at a time\r\n    */}\r\n      <div className=\"pagination\">\r\n        {/* previous button */}\r\n        <button\r\n          onClick={goToPreviousPage}\r\n          className={`prev ${currentPage === 1 ? \"disabled\" : \"\"}`}\r\n        >\r\n          prev\r\n        </button>\r\n\r\n        {/* show page numbers */}\r\n        {getPaginationGroup().map((item, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={changePage}\r\n            className={`paginationItem ${\r\n              currentPage === item ? \"active\" : null\r\n            }`}\r\n          >\r\n            <span>{item}</span>\r\n          </button>\r\n        ))}\r\n\r\n        {/* next button */}\r\n        <button\r\n          onClick={goToNextPage}\r\n          className={`next ${currentPage === pages ? \"disabled\" : \"\"}`}\r\n        >\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}